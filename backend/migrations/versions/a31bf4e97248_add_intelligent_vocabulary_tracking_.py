"""Add intelligent vocabulary tracking tables

Revision ID: a31bf4e97248
Revises: 103232290532
Create Date: 2025-10-17 22:03:14.393725

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a31bf4e97248"
down_revision: Union[str, Sequence[str], None] = "103232290532"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _has_vector_extension(bind) -> bool:
    """Check if pgvector extension is installed."""
    try:
        res = bind.execute(text("SELECT 1 FROM pg_extension WHERE extname = 'vector' LIMIT 1"))
        return bool(res.scalar())
    except Exception:
        return False


def _get_vector_column(dim: int):
    """Return vector column type if extension is available, otherwise BYTEA."""
    bind = op.get_bind()
    if _has_vector_extension(bind):
        from pgvector.sqlalchemy import Vector

        return Vector(dim)
    else:
        # Fallback to BYTEA when vector extension is not available
        return sa.LargeBinary


def upgrade() -> None:
    """Upgrade schema."""
    vector_col = _get_vector_column(1536)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "generated_vocabulary",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("language_code", sa.String(length=8), nullable=False),
        sa.Column("word", sa.String(length=150), nullable=False),
        sa.Column("word_normalized", sa.String(length=150), nullable=False),
        sa.Column("proficiency_level", sa.String(length=32), nullable=False),
        sa.Column("difficulty", sa.String(length=32), nullable=False),
        sa.Column("semantic_field", sa.String(length=64), nullable=False),
        sa.Column("vocabulary_data", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("times_requested", sa.Integer(), nullable=False),
        sa.Column("last_requested", sa.DateTime(timezone=True), nullable=True),
        sa.Column("emb", vector_col, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_gen_vocab_lookup",
        "generated_vocabulary",
        ["language_code", "proficiency_level", "difficulty"],
        unique=False,
    )
    op.create_index(
        "ix_gen_vocab_semantic", "generated_vocabulary", ["language_code", "semantic_field"], unique=False
    )
    op.create_index(
        op.f("ix_generated_vocabulary_difficulty"), "generated_vocabulary", ["difficulty"], unique=False
    )
    op.create_index(
        op.f("ix_generated_vocabulary_language_code"), "generated_vocabulary", ["language_code"], unique=False
    )
    op.create_index(
        op.f("ix_generated_vocabulary_proficiency_level"),
        "generated_vocabulary",
        ["proficiency_level"],
        unique=False,
    )
    op.create_index(
        op.f("ix_generated_vocabulary_semantic_field"),
        "generated_vocabulary",
        ["semantic_field"],
        unique=False,
    )
    op.create_index(op.f("ix_generated_vocabulary_word"), "generated_vocabulary", ["word"], unique=False)
    op.create_index(
        op.f("ix_generated_vocabulary_word_normalized"),
        "generated_vocabulary",
        ["word_normalized"],
        unique=False,
    )
    op.create_table(
        "user_proficiency",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("language_code", sa.String(length=8), nullable=False),
        sa.Column("proficiency_level", sa.String(length=32), nullable=False),
        sa.Column("estimated_vocabulary_size", sa.Integer(), nullable=False),
        sa.Column("total_study_time_minutes", sa.Integer(), nullable=False),
        sa.Column("total_lessons_completed", sa.Integer(), nullable=False),
        sa.Column("current_streak_days", sa.Integer(), nullable=False),
        sa.Column("longest_streak_days", sa.Integer(), nullable=False),
        sa.Column("last_study_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_assessment_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("assessment_scores", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_user_prof_unique", "user_proficiency", ["user_id", "language_code"], unique=True)
    op.create_index(
        op.f("ix_user_proficiency_language_code"), "user_proficiency", ["language_code"], unique=False
    )
    op.create_index(op.f("ix_user_proficiency_user_id"), "user_proficiency", ["user_id"], unique=False)
    op.create_table(
        "user_vocabulary",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("language_code", sa.String(length=8), nullable=False),
        sa.Column("word", sa.String(length=150), nullable=False),
        sa.Column("word_normalized", sa.String(length=150), nullable=False),
        sa.Column("times_seen", sa.Integer(), nullable=False),
        sa.Column("times_correct", sa.Integer(), nullable=False),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("interval_days", sa.Integer(), nullable=True),
        sa.Column("ease_factor", sa.Float(), nullable=True),
        sa.Column("next_review", sa.DateTime(timezone=True), nullable=True),
        sa.Column("mastery_level", sa.String(length=32), nullable=False),
        sa.Column("avg_response_time_ms", sa.Integer(), nullable=True),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_user_vocab_review", "user_vocabulary", ["user_id", "language_code", "next_review"], unique=False
    )
    op.create_index(
        "ix_user_vocab_unique", "user_vocabulary", ["user_id", "language_code", "word"], unique=True
    )
    op.create_index(
        op.f("ix_user_vocabulary_language_code"), "user_vocabulary", ["language_code"], unique=False
    )
    op.create_index(
        op.f("ix_user_vocabulary_mastery_level"), "user_vocabulary", ["mastery_level"], unique=False
    )
    op.create_index(op.f("ix_user_vocabulary_next_review"), "user_vocabulary", ["next_review"], unique=False)
    op.create_index(op.f("ix_user_vocabulary_user_id"), "user_vocabulary", ["user_id"], unique=False)
    op.create_index(op.f("ix_user_vocabulary_word"), "user_vocabulary", ["word"], unique=False)
    op.create_index(
        op.f("ix_user_vocabulary_word_normalized"), "user_vocabulary", ["word_normalized"], unique=False
    )
    op.create_table(
        "vocabulary_mastery",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("language_code", sa.String(length=8), nullable=False),
        sa.Column("word", sa.String(length=150), nullable=False),
        sa.Column("mastery_achieved", sa.String(length=32), nullable=False),
        sa.Column("achieved_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("total_encounters", sa.Integer(), nullable=False),
        sa.Column("final_accuracy", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_vocab_mastery_timeline",
        "vocabulary_mastery",
        ["user_id", "language_code", "achieved_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vocabulary_mastery_achieved_at"), "vocabulary_mastery", ["achieved_at"], unique=False
    )
    op.create_index(
        op.f("ix_vocabulary_mastery_language_code"), "vocabulary_mastery", ["language_code"], unique=False
    )
    op.create_index(op.f("ix_vocabulary_mastery_user_id"), "vocabulary_mastery", ["user_id"], unique=False)
    op.alter_column(
        "challenge_streak",
        "current_streak",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "longest_streak",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "total_days_completed",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "is_active_today",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("uq_challenge_streak_user_id"), "challenge_streak", type_="unique")
    op.alter_column(
        "daily_challenge",
        "current_progress",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "daily_challenge",
        "is_completed",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "daily_challenge",
        "is_weekend_bonus",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "days_completed",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "is_won",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "is_lost",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("grammar_topic_source_id_fkey"), "grammar_topic", type_="foreignkey")
    op.create_foreign_key(None, "grammar_topic", "source_doc", ["source_id"], ["id"])
    op.drop_constraint(op.f("language_code_key"), "language", type_="unique")
    op.create_index(op.f("ix_language_code"), "language", ["code"], unique=True)
    op.create_index(
        op.f("ix_learning_event_event_timestamp"), "learning_event", ["event_timestamp"], unique=False
    )
    op.drop_constraint(op.f("learning_event_user_id_fkey"), "learning_event", type_="foreignkey")
    op.drop_constraint(op.f("learning_event_work_id_fkey"), "learning_event", type_="foreignkey")
    op.create_foreign_key(None, "learning_event", "text_work", ["work_id"], ["id"])
    op.create_foreign_key(None, "learning_event", "user", ["user_id"], ["id"])
    # Drop and recreate constraint to standardize naming (constraint must exist for ON CONFLICT in code)
    op.drop_constraint(op.f("uq_lex_lang_lemma"), "lexeme", type_="unique")
    op.create_unique_constraint("uq_lex_lang_lemma", "lexeme", ["language_id", "lemma"])
    op.drop_constraint(op.f("source_doc_slug_key"), "source_doc", type_="unique")
    op.create_index(op.f("ix_source_doc_slug"), "source_doc", ["slug"], unique=True)
    op.alter_column(
        "text_segment", "ref", existing_type=sa.VARCHAR(length=64), type_=sa.String(length=100), nullable=True
    )
    op.drop_index(
        op.f("ix_text_segment_emb_cosine"),
        table_name="text_segment",
        postgresql_ops={"emb": "vector_cosine_ops"},
        postgresql_with={"lists": "100"},
        postgresql_using="ivfflat",
    )
    op.drop_index(
        op.f("ix_text_segment_text_fold_trgm"),
        table_name="text_segment",
        postgresql_ops={"text_fold": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_constraint(op.f("uq_segment_ref"), "text_segment", type_="unique")
    op.drop_constraint(op.f("text_segment_work_id_fkey"), "text_segment", type_="foreignkey")
    op.create_foreign_key(None, "text_segment", "text_work", ["work_id"], ["id"])
    op.drop_constraint(op.f("text_work_language_id_fkey"), "text_work", type_="foreignkey")
    op.drop_constraint(op.f("text_work_source_id_fkey"), "text_work", type_="foreignkey")
    op.create_foreign_key(None, "text_work", "language", ["language_id"], ["id"])
    op.create_foreign_key(None, "text_work", "source_doc", ["source_id"], ["id"])
    op.alter_column(
        "user", "is_active", existing_type=sa.BOOLEAN(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user", "is_superuser", existing_type=sa.BOOLEAN(), server_default=None, existing_nullable=False
    )
    op.drop_constraint(op.f("user_achievement_user_id_fkey"), "user_achievement", type_="foreignkey")
    op.create_foreign_key(None, "user_achievement", "user", ["user_id"], ["id"])
    op.drop_constraint(op.f("user_api_config_user_id_fkey"), "user_api_config", type_="foreignkey")
    op.create_foreign_key(None, "user_api_config", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_preferences",
        "theme",
        existing_type=sa.VARCHAR(length=20),
        server_default=None,
        existing_nullable=True,
    )
    op.alter_column(
        "user_preferences",
        "daily_xp_goal",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "srs_daily_new_cards",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "srs_daily_review_limit",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("user_preferences_user_id_fkey"), "user_preferences", type_="foreignkey")
    op.create_foreign_key(None, "user_preferences", "user", ["user_id"], ["id"])
    op.drop_constraint(op.f("user_profile_user_id_fkey"), "user_profile", type_="foreignkey")
    op.create_foreign_key(None, "user_profile", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_progress", "xp_total", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_progress", "level", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_progress",
        "streak_days",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "max_streak",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress", "coins", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_progress",
        "streak_freezes",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "streak_freeze_used_today",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "xp_boost_2x",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "xp_boost_5x",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress", "time_warp", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_progress",
        "coin_doubler",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "perfect_protection",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_lessons",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_exercises",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_time_minutes",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "challenge_success_rate",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "avg_completion_time_seconds",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "preferred_difficulty",
        existing_type=sa.VARCHAR(length=20),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_challenges_attempted",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_challenges_completed",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "consecutive_failures",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "consecutive_successes",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("user_progress_user_id_fkey"), "user_progress", type_="foreignkey")
    op.create_foreign_key(None, "user_progress", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_quest",
        "progress_current",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "progress_target",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "status",
        existing_type=sa.VARCHAR(length=20),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest", "xp_reward", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_quest", "coin_reward", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.drop_constraint(op.f("user_quest_user_id_fkey"), "user_quest", type_="foreignkey")
    op.create_foreign_key(None, "user_quest", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_skill",
        "elo_rating",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_skill",
        "total_attempts",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_skill",
        "correct_attempts",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("user_skill_user_id_fkey"), "user_skill", type_="foreignkey")
    op.create_foreign_key(None, "user_skill", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_srs_card",
        "stability",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "difficulty",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "elapsed_days",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "scheduled_days",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card", "reps", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_srs_card", "lapses", existing_type=sa.INTEGER(), server_default=None, existing_nullable=False
    )
    op.alter_column(
        "user_srs_card",
        "state",
        existing_type=sa.VARCHAR(length=20),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("user_srs_card_user_id_fkey"), "user_srs_card", type_="foreignkey")
    op.create_foreign_key(None, "user_srs_card", "user", ["user_id"], ["id"])
    op.alter_column(
        "user_text_stats",
        "tokens_seen",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "unique_lemmas_known",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "segments_completed",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "max_hintless_run",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(op.f("user_text_stats_work_id_fkey"), "user_text_stats", type_="foreignkey")
    op.drop_constraint(op.f("user_text_stats_user_id_fkey"), "user_text_stats", type_="foreignkey")
    op.create_foreign_key(None, "user_text_stats", "text_work", ["work_id"], ["id"])
    op.create_foreign_key(None, "user_text_stats", "user", ["user_id"], ["id"])
    op.alter_column(
        "weekly_challenge",
        "current_progress",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "is_completed",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "reward_multiplier",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "is_special_event",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "weekly_challenge",
        "is_special_event",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "reward_multiplier",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'5'::double precision"),
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "is_completed",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "weekly_challenge",
        "current_progress",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_text_stats", type_="foreignkey")
    op.drop_constraint(None, "user_text_stats", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_text_stats_user_id_fkey"),
        "user_text_stats",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("user_text_stats_work_id_fkey"),
        "user_text_stats",
        "text_work",
        ["work_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "user_text_stats",
        "max_hintless_run",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "segments_completed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "unique_lemmas_known",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_text_stats",
        "tokens_seen",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_srs_card", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_srs_card_user_id_fkey"), "user_srs_card", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.alter_column(
        "user_srs_card",
        "state",
        existing_type=sa.VARCHAR(length=20),
        server_default=sa.text("'new'::character varying"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "lapses",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "reps",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "scheduled_days",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "elapsed_days",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "difficulty",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'5'::double precision"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_srs_card",
        "stability",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'1'::double precision"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_skill", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_skill_user_id_fkey"), "user_skill", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.alter_column(
        "user_skill",
        "correct_attempts",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_skill",
        "total_attempts",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_skill",
        "elo_rating",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'1000'::double precision"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_quest", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_quest_user_id_fkey"), "user_quest", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.alter_column(
        "user_quest",
        "coin_reward",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "xp_reward",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "status",
        existing_type=sa.VARCHAR(length=20),
        server_default=sa.text("'active'::character varying"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "progress_target",
        existing_type=sa.INTEGER(),
        server_default=sa.text("1"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_quest",
        "progress_current",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_progress", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_progress_user_id_fkey"), "user_progress", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.alter_column(
        "user_progress",
        "consecutive_successes",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "consecutive_failures",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_challenges_completed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_challenges_attempted",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "preferred_difficulty",
        existing_type=sa.VARCHAR(length=20),
        server_default=sa.text("'medium'::character varying"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "avg_completion_time_seconds",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'0'::double precision"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "challenge_success_rate",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        server_default=sa.text("'0'::double precision"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_time_minutes",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_exercises",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "total_lessons",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "perfect_protection",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "coin_doubler",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "time_warp",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "xp_boost_5x",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "xp_boost_2x",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "streak_freeze_used_today",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "streak_freezes",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "coins",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "max_streak",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "streak_days",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "level",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_progress",
        "xp_total",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "user_profile", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_profile_user_id_fkey"), "user_profile", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_constraint(None, "user_preferences", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_preferences_user_id_fkey"),
        "user_preferences",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "user_preferences",
        "srs_daily_review_limit",
        existing_type=sa.INTEGER(),
        server_default=sa.text("100"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "srs_daily_new_cards",
        existing_type=sa.INTEGER(),
        server_default=sa.text("10"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "daily_xp_goal",
        existing_type=sa.INTEGER(),
        server_default=sa.text("50"),
        existing_nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "theme",
        existing_type=sa.VARCHAR(length=20),
        server_default=sa.text("'auto'::character varying"),
        existing_nullable=True,
    )
    op.drop_constraint(None, "user_api_config", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_api_config_user_id_fkey"),
        "user_api_config",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "user_achievement", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_achievement_user_id_fkey"),
        "user_achievement",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "user",
        "is_superuser",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_nullable=False,
    )
    op.drop_constraint(None, "text_work", type_="foreignkey")
    op.drop_constraint(None, "text_work", type_="foreignkey")
    op.create_foreign_key(
        op.f("text_work_source_id_fkey"),
        "text_work",
        "source_doc",
        ["source_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("text_work_language_id_fkey"),
        "text_work",
        "language",
        ["language_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(None, "text_segment", type_="foreignkey")
    op.create_foreign_key(
        op.f("text_segment_work_id_fkey"),
        "text_segment",
        "text_work",
        ["work_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_unique_constraint(
        op.f("uq_segment_ref"), "text_segment", ["work_id", "ref"], postgresql_nulls_not_distinct=False
    )
    op.create_index(
        op.f("ix_text_segment_text_fold_trgm"),
        "text_segment",
        ["text_fold"],
        unique=False,
        postgresql_ops={"text_fold": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_text_segment_emb_cosine"),
        "text_segment",
        ["emb"],
        unique=False,
        postgresql_ops={"emb": "vector_cosine_ops"},
        postgresql_with={"lists": "100"},
        postgresql_using="ivfflat",
    )
    op.alter_column(
        "text_segment",
        "ref",
        existing_type=sa.String(length=100),
        type_=sa.VARCHAR(length=64),
        nullable=False,
    )
    op.drop_index(op.f("ix_source_doc_slug"), table_name="source_doc")
    op.create_unique_constraint(
        op.f("source_doc_slug_key"), "source_doc", ["slug"], postgresql_nulls_not_distinct=False
    )
    op.create_unique_constraint(
        op.f("uq_lex_lang_lemma"), "lexeme", ["language_id", "lemma"], postgresql_nulls_not_distinct=False
    )
    op.drop_constraint(None, "learning_event", type_="foreignkey")
    op.drop_constraint(None, "learning_event", type_="foreignkey")
    op.create_foreign_key(
        op.f("learning_event_work_id_fkey"),
        "learning_event",
        "text_work",
        ["work_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("learning_event_user_id_fkey"), "learning_event", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_index(op.f("ix_learning_event_event_timestamp"), table_name="learning_event")
    op.drop_index(op.f("ix_language_code"), table_name="language")
    op.create_unique_constraint(
        op.f("language_code_key"), "language", ["code"], postgresql_nulls_not_distinct=False
    )
    op.drop_constraint(None, "grammar_topic", type_="foreignkey")
    op.create_foreign_key(
        op.f("grammar_topic_source_id_fkey"),
        "grammar_topic",
        "source_doc",
        ["source_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "double_or_nothing",
        "is_lost",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "is_won",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_nullable=False,
    )
    op.alter_column(
        "double_or_nothing",
        "days_completed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "daily_challenge",
        "is_weekend_bonus",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "daily_challenge",
        "is_completed",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "daily_challenge",
        "current_progress",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.create_unique_constraint(
        op.f("uq_challenge_streak_user_id"),
        "challenge_streak",
        ["user_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "challenge_streak",
        "is_active_today",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "total_days_completed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "longest_streak",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.alter_column(
        "challenge_streak",
        "current_streak",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_vocabulary_mastery_user_id"), table_name="vocabulary_mastery")
    op.drop_index(op.f("ix_vocabulary_mastery_language_code"), table_name="vocabulary_mastery")
    op.drop_index(op.f("ix_vocabulary_mastery_achieved_at"), table_name="vocabulary_mastery")
    op.drop_index("ix_vocab_mastery_timeline", table_name="vocabulary_mastery")
    op.drop_table("vocabulary_mastery")
    op.drop_index(op.f("ix_user_vocabulary_word_normalized"), table_name="user_vocabulary")
    op.drop_index(op.f("ix_user_vocabulary_word"), table_name="user_vocabulary")
    op.drop_index(op.f("ix_user_vocabulary_user_id"), table_name="user_vocabulary")
    op.drop_index(op.f("ix_user_vocabulary_next_review"), table_name="user_vocabulary")
    op.drop_index(op.f("ix_user_vocabulary_mastery_level"), table_name="user_vocabulary")
    op.drop_index(op.f("ix_user_vocabulary_language_code"), table_name="user_vocabulary")
    op.drop_index("ix_user_vocab_unique", table_name="user_vocabulary")
    op.drop_index("ix_user_vocab_review", table_name="user_vocabulary")
    op.drop_table("user_vocabulary")
    op.drop_index(op.f("ix_user_proficiency_user_id"), table_name="user_proficiency")
    op.drop_index(op.f("ix_user_proficiency_language_code"), table_name="user_proficiency")
    op.drop_index("ix_user_prof_unique", table_name="user_proficiency")
    op.drop_table("user_proficiency")
    op.drop_index(op.f("ix_generated_vocabulary_word_normalized"), table_name="generated_vocabulary")
    op.drop_index(op.f("ix_generated_vocabulary_word"), table_name="generated_vocabulary")
    op.drop_index(op.f("ix_generated_vocabulary_semantic_field"), table_name="generated_vocabulary")
    op.drop_index(op.f("ix_generated_vocabulary_proficiency_level"), table_name="generated_vocabulary")
    op.drop_index(op.f("ix_generated_vocabulary_language_code"), table_name="generated_vocabulary")
    op.drop_index(op.f("ix_generated_vocabulary_difficulty"), table_name="generated_vocabulary")
    op.drop_index("ix_gen_vocab_semantic", table_name="generated_vocabulary")
    op.drop_index("ix_gen_vocab_lookup", table_name="generated_vocabulary")
    op.drop_table("generated_vocabulary")
    # ### end Alembic commands ###
