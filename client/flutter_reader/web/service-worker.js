// Workbox-based Service Worker for PRAVIEL Flutter Web App
// Replaces deprecated Flutter default service worker
// See: https://mohanrajmuthukumaran.hashnode.dev/flutter-pwa-workbox-caching

importScripts('https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js');

// Configure Workbox
workbox.setConfig({
  debug: false,
});

// Precache Flutter app shell (generated by Flutter build)
workbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);

// Cache strategy for HTML documents (app shell)
// Network-first: Always try to get fresh content, fall back to cache
workbox.routing.registerRoute(
  ({request}) => request.destination === 'document',
  new workbox.strategies.NetworkFirst({
    cacheName: 'praviel-documents',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Cache strategy for JavaScript files
// Stale-while-revalidate: Use cache immediately, update in background
workbox.routing.registerRoute(
  ({request}) => request.destination === 'script',
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: 'praviel-scripts',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Cache strategy for CSS files
workbox.routing.registerRoute(
  ({request}) => request.destination === 'style',
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: 'praviel-styles',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Cache strategy for fonts (cache-first for best performance)
// Fonts rarely change, so aggressive caching is appropriate
workbox.routing.registerRoute(
  ({request}) => request.destination === 'font',
  new workbox.strategies.CacheFirst({
    cacheName: 'praviel-fonts',
    plugins: [
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
      }),
    ],
  })
);

// Cache strategy for images (cache-first)
workbox.routing.registerRoute(
  ({request}) => request.destination === 'image',
  new workbox.strategies.CacheFirst({
    cacheName: 'praviel-images',
    plugins: [
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache strategy for audio files (TTS output)
// Cache-first with long expiration for better offline experience
workbox.routing.registerRoute(
  ({url}) => url.pathname.startsWith('/audio') || url.pathname.includes('.mp3') || url.pathname.includes('.ogg'),
  new workbox.strategies.CacheFirst({
    cacheName: 'praviel-audio',
    plugins: [
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache strategy for API calls
// Network-first: Always try to get fresh data, fall back to cache for offline
workbox.routing.registerRoute(
  ({url}) => url.pathname.startsWith('/api/'),
  new workbox.strategies.NetworkFirst({
    cacheName: 'praviel-api',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Cache strategy for Google Fonts (if used)
workbox.routing.registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com' || url.origin === 'https://fonts.gstatic.com',
  new workbox.strategies.CacheFirst({
    cacheName: 'praviel-google-fonts',
    plugins: [
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
      }),
    ],
  })
);

// Handle service worker installation
self.addEventListener('install', (event) => {
  console.log('Service worker installing...');
  // Force the waiting service worker to become the active service worker
  self.skipWaiting();
});

// Handle service worker activation
self.addEventListener('activate', (event) => {
  console.log('Service worker activating...');
  // Clean up old caches
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((cacheName) => {
            // Remove caches that don't start with our prefix
            return cacheName.startsWith('praviel-') && !cacheName.startsWith('workbox-');
          })
          .map((cacheName) => {
            // Keep only the caches we defined above
            const validCaches = [
              'praviel-documents',
              'praviel-scripts',
              'praviel-styles',
              'praviel-fonts',
              'praviel-images',
              'praviel-audio',
              'praviel-api',
              'praviel-google-fonts',
            ];
            if (!validCaches.includes(cacheName)) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
      );
    })
  );
  // Take control of all clients immediately
  return self.clients.claim();
});

// Handle fetch errors gracefully
self.addEventListener('fetch', (event) => {
  // Let Workbox handle the routing
  // This is a fallback for any unmatched requests
  if (!event.request.url.startsWith('http')) {
    return;
  }
});

// Handle background sync (for offline actions)
// This allows users to perform actions offline and sync when online
if ('sync' in self.registration) {
  self.addEventListener('sync', (event) => {
    if (event.tag === 'sync-lessons') {
      event.waitUntil(syncLessons());
    }
  });
}

async function syncLessons() {
  // Placeholder for syncing lesson progress when back online
  // Implement based on your app's offline data storage strategy
  console.log('Syncing lessons with server...');
}

// Push notification support (for future use)
self.addEventListener('push', (event) => {
  const options = {
    body: event.data ? event.data.text() : 'New update available',
    icon: '/icons/Icon-192.png',
    badge: '/icons/Icon-192.png',
    vibrate: [200, 100, 200],
  };

  event.waitUntil(
    self.registration.showNotification('PRAVIEL', options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow('/')
  );
});
