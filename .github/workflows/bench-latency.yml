name: bench-latency

on:
  workflow_dispatch:
    inputs:
      runs:
        description: Timed request count (default 150)
        required: false
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  bench:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-bench'))
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql+asyncpg://app:app@127.0.0.1:5433/app
      DATABASE_URL_SYNC: postgresql+psycopg://app:app@127.0.0.1:5433/app
      PYTHONPATH: backend
      BENCH_RUNS: ${{ github.event.inputs.runs }}
      REDIS_URL: redis://127.0.0.1:6379/0
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: app
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U app -d app"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'

      - name: Wait for database
        run: |
          python - <<'PY_WAIT'
          import asyncio
          import os
          import time

          import asyncpg

          async def main() -> None:
              url = os.getenv('DATABASE_URL_SYNC', 'postgresql+psycopg://app:app@127.0.0.1:5433/app')
              url = url.replace('postgresql+psycopg://', 'postgresql://')
              deadline = time.time() + 60
              while time.time() < deadline:
                  try:
                      conn = await asyncpg.connect(url)
                  except Exception:
                      await asyncio.sleep(1)
                  else:
                      await conn.close()
                      return
              raise SystemExit('Database not ready after 60s')

          asyncio.run(main())
          PY_WAIT

      - name: Apply migrations
        run: |
          DATABASE_URL="$DATABASE_URL_SYNC" \
          python -m alembic -c alembic.ini upgrade head

      - name: Run latency bench
        shell: bash
        run: |
          set -euo pipefail
          RUNS="${BENCH_RUNS:-}"
          if [ -z "$RUNS" ]; then
            RUNS=150
          fi
          mkdir -p artifacts
          uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          UVICORN_PID=$!
          trap 'kill "${UVICORN_PID}" 2>/dev/null || true' EXIT
          for attempt in {1..30}; do
            if curl -sSf http://127.0.0.1:8000/health > /dev/null; then
              break
            fi
            sleep 1
          done
          python scripts/dev/bench_reader.py \
            --base-url http://127.0.0.1:8000 \
            --runs "$RUNS" \
            --warmup 30 \
            --include '{"lsj": true, "smyth": true}' \
            --payload '{"q": "μῆνιν ἄειδε"}' \
            | tee artifacts/bench_output.txt

      - name: Upload bench artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bench-latency
          path: artifacts/bench_output.txt

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const outputPath = 'artifacts/bench_output.txt';
            if (!fs.existsSync(outputPath)) {
              core.warning('Bench output missing; skipping comment.');
              return;
            }
            const marker = '<!-- bench-latency -->';
            const output = fs.readFileSync(outputPath, 'utf8').trim();
            const body = `${marker}\n### Latency Bench\n\n${output}`;
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number,
              per_page: 100,
            });
            const existing = comments.find(comment => comment.user?.login === 'github-actions[bot]' && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
